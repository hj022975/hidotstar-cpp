<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="CrGU-(n(:a*j(IQMzD~9" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="~W0,D.-r#7fq~vH^r]p{" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum HiDotStarColors {" line1="    //% block=red" line2="    Red = 0xFF0000," line3="    //% block=orange" line4="    Orange = 0xFFA500," line5="    //% block=yellow" line6="    Yellow = 0xFFFF00," line7="    //% block=green" line8="    Green = 0x00FF00," line9="    //% block=blue" line10="    Blue = 0x0000FF," line11="    //% block=indigo" line12="    Indigo = 0x4b0082," line13="    //% block=violet" line14="    Violet = 0x8a2be2," line15="    //% block=purple" line16="    Purple = 0xFF00FF," line17="    //% block=white" line18="    White = 0xFFFFFF," line19="    //% block=black" line20="    Black = 0x000000" line21="}" numlines="22"></mutation><next><block type="typescript_statement" id="yGk@`-vQ5JM*5,PvEx8Y" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum HiDotStarMode {" line1="    //% block=&quot;RGB (GRB format)&quot;" line2="    RGB = 1, // not used" line3="    //% block=&quot;RGB+W&quot;" line4="    RGBW = 2, // not used" line5="    //% block=&quot;RGB (RGB format)&quot;" line6="    RGB_RGB = 3 // always used" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id=",.i!-[YuzX10=`8PoYq`" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace hidotstar {" line1="    /**" line2="     * A HiDotStar strip" line3="     */" line4="    export class Strip {" line5="        buf: Buffer;" line6="        // TODO: encode as bytes instead of 32bit" line7="        brightness: number;" line8="        start: number; // start offset in LED strip" line9="        _length: number; // number of LEDs" line10="        _mode: HiDotStarMode;" line11="        _matrixWidth: number; // number of leds in a matrix - if any" line12="" line13="        /**" line14="         * Shows all LEDs to a given color (range 0-255 for r, g, b)." line15="         * @param rgb RGB color of the LED" line16="         */" line17="        //% blockId=&quot;hidotstar_set_strip_color&quot; block=&quot;%strip|show color %rgb=hidotstar_colors&quot;" line18="        //% strip.defl=strip" line19="        //% weight=85 blockGap=8" line20="        //% parts=&quot;hidotstar&quot;" line21="        showColor(rgb: number) {" line22="            rgb = rgb &gt;&gt; 0;" line23="            this.setAllRGB(rgb);" line24="            this.show();" line25="        }" line26="" line27="        /**" line28="         * Shows a rainbow pattern on all LEDs." line29="         * @param startHue the start hue value for the rainbow, eg: 1" line30="         * @param endHue the end hue value for the rainbow, eg: 360" line31="         */" line32="        //% blockId=&quot;hidotstar_set_strip_rainbow&quot; block=&quot;%strip|show rainbow from %startHue|to %endHue&quot;" line33="        //% strip.defl=strip" line34="        //% weight=85 blockGap=8" line35="        //% parts=&quot;hidotstar&quot;" line36="        showRainbow(startHue: number = 1, endHue: number = 360) {" line37="            if (this._length &lt;= 0) return;" line38="" line39="            startHue = startHue &gt;&gt; 0;" line40="            endHue = endHue &gt;&gt; 0;" line41="            const saturation = 100;" line42="            const luminance = 50;" line43="            const steps = this._length;" line44="            const direction = HueInterpolationDirection.Clockwise;" line45="" line46="            //hue" line47="            const h1 = startHue;" line48="            const h2 = endHue;" line49="            const hDistCW = ((h2 + 360) - h1) % 360;" line50="            const hStepCW = Math.idiv((hDistCW * 100), steps);" line51="            const hDistCCW = ((h1 + 360) - h2) % 360;" line52="            const hStepCCW = Math.idiv(-(hDistCCW * 100), steps);" line53="            let hStep: number;" line54="            if (direction === HueInterpolationDirection.Clockwise) {" line55="                hStep = hStepCW;" line56="            } else if (direction === HueInterpolationDirection.CounterClockwise) {" line57="                hStep = hStepCCW;" line58="            } else {" line59="                hStep = hDistCW &lt; hDistCCW ? hStepCW : hStepCCW;" line60="            }" line61="            const h1_100 = h1 * 100; //we multiply by 100 so we keep more accurate results while doing interpolation" line62="" line63="            //sat" line64="            const s1 = saturation;" line65="            const s2 = saturation;" line66="            const sDist = s2 - s1;" line67="            const sStep = Math.idiv(sDist, steps);" line68="            const s1_100 = s1 * 100;" line69="" line70="            //lum" line71="            const l1 = luminance;" line72="            const l2 = luminance;" line73="            const lDist = l2 - l1;" line74="            const lStep = Math.idiv(lDist, steps);" line75="            const l1_100 = l1 * 100" line76="" line77="            //interpolate" line78="            if (steps === 1) {" line79="                this.setPixelColor(0, hsl(h1 + hStep, s1 + sStep, l1 + lStep))" line80="            } else {" line81="                this.setPixelColor(0, hsl(startHue, saturation, luminance));" line82="                for (let i = 1; i &lt; steps - 1; i++) {" line83="                    const h = Math.idiv((h1_100 + i * hStep), 100) + 360;" line84="                    const s = Math.idiv((s1_100 + i * sStep), 100);" line85="                    const l = Math.idiv((l1_100 + i * lStep), 100);" line86="                    this.setPixelColor(i, hsl(h, s, l));" line87="                }" line88="                this.setPixelColor(steps - 1, hsl(endHue, saturation, luminance));" line89="            }" line90="            this.show();" line91="        }" line92="" line93="        /**" line94="         * Displays a vertical bar graph based on the `value` and `high` value." line95="         * If `high` is 0, the chart gets adjusted automatically." line96="         * @param value current value to plot" line97="         * @param high maximum value, eg: 255" line98="         */" line99="        //% weight=84" line100="        //% blockId=hidotstar_show_bar_graph block=&quot;%strip|show bar graph of %value|up to %high&quot;" line101="        //% strip.defl=strip" line102="        //% icon=&quot;\uf080&quot;" line103="        //% parts=&quot;hidotstar&quot;" line104="        showBarGraph(value: number, high: number): void {" line105="            if (high &lt;= 0) {" line106="                this.clear();" line107="                this.setPixelColor(0, HiDotStarColors.Yellow);" line108="                this.show();" line109="                return;" line110="            }" line111="" line112="            value = Math.abs(value);" line113="            const n = this._length;" line114="            const n1 = n - 1;" line115="            let v = Math.idiv((value * n), high);" line116="            if (v == 0) {" line117="                this.setPixelColor(0, 0x666600);" line118="                for (let j = 1; j &lt; n; ++j)" line119="                    this.setPixelColor(j, 0);" line120="            } else {" line121="                for (let k = 0; k &lt; n; ++k) {" line122="                    if (k &lt;= v) {" line123="                        const b = Math.idiv(k * 255, n1);" line124="                        this.setPixelColor(k, hidotstar.rgb(b, 0, 255 - b));" line125="                    }" line126="                    else this.setPixelColor(k, 0);" line127="                }" line128="            }" line129="            this.show();" line130="        }" line131="" line132="        /**" line133="         * Set LED to a given color (range 0-255 for r, g, b)." line134="         * You need to call ``show`` to make the changes visible." line135="         * @param pixeloffset position of the HiDotStar in the strip" line136="         * @param rgb RGB color of the LED" line137="         */" line138="        //% blockId=&quot;hidotstar_set_pixel_color&quot; block=&quot;%strip|set pixel color at %pixeloffset|to %rgb=hidotstar_colors&quot;" line139="        //% strip.defl=strip" line140="        //% blockGap=8" line141="        //% weight=80" line142="        //% parts=&quot;hidotstar&quot; advanced=true" line143="        setPixelColor(pixeloffset: number, rgb: number): void {" line144="            this.setPixelRGB(pixeloffset &gt;&gt; 0, rgb &gt;&gt; 0);" line145="        }" line146="" line147="        /**" line148="         * Sets the number of pixels in a matrix shaped strip" line149="         * @param width number of pixels in a row" line150="         */" line151="        //% blockId=hidotstar_set_matrix_width block=&quot;%strip|set matrix width %width&quot;" line152="        //% strip.defl=strip" line153="        //% blockGap=8" line154="        //% weight=5" line155="        //% parts=&quot;hidotstar&quot; advanced=true" line156="        setMatrixWidth(width: number) {" line157="            this._matrixWidth = Math.min(this._length, width &gt;&gt; 0);" line158="        }" line159="" line160="        /**" line161="         * Set LED to a given color (range 0-255 for r, g, b) in a matrix shaped strip" line162="         * You need to call ``show`` to make the changes visible." line163="         * @param x horizontal position" line164="         * @param y horizontal position" line165="         * @param rgb RGB color of the LED" line166="         */" line167="        //% blockId=&quot;hidotstar_set_matrix_color&quot; block=&quot;%strip|set matrix color at x %x|y %y|to %rgb=hidotstar_colors&quot;" line168="        //% strip.defl=strip" line169="        //% weight=4" line170="        //% parts=&quot;hidotstar&quot; advanced=true" line171="        setMatrixColor(x: number, y: number, rgb: number) {" line172="            if (this._matrixWidth &lt;= 0) return; // not a matrix, ignore" line173="            x = x &gt;&gt; 0;" line174="            y = y &gt;&gt; 0;" line175="            rgb = rgb &gt;&gt; 0;" line176="            const cols = Math.idiv(this._length, this._matrixWidth);" line177="            if (x &lt; 0 || x &gt;= this._matrixWidth || y &lt; 0 || y &gt;= cols) return;" line178="            let m = x + y * this._matrixWidth;" line179="            this.setPixelColor(m, rgb);" line180="        }" line181="" line182="&#9;/**" line183="&#9; * @param buf Buffer to send" line184="&#9; * @param len Number of pixels to send data for" line185="&#9; * dummy function pass through for C function" line186="&#9; */" line187="        //% blockId=brightboard_spi_dotstar_send_buffer blockHidden=true " line188="        //% shim=hidotstar::spiDotStarSendBuffer" line189="        spiDotStarSendBuffer(buf: Buffer, len: number): void {" line190="        }" line191="" line192="        /**" line193="         * Send all the changes to the strip." line194="         */" line195="        //% blockId=&quot;hidotstar_show&quot; block=&quot;%strip|show&quot; blockGap=8" line196="        //% strip.defl=strip" line197="        //% weight=79" line198="        //% parts=&quot;hidotstar&quot;" line199="        show() {" line200="////////            spiDotStarSendBuffer(this.buf, this._length);" line201="&#9;}" line202="" line203="        /**" line204="         * Turn off all LEDs." line205="         * You need to call ``show`` to make the changes visible." line206="         */" line207="        //% blockId=&quot;hidotstar_clear&quot; block=&quot;%strip|clear&quot;" line208="        //% strip.defl=strip" line209="        //% weight=76" line210="        //% parts=&quot;hidotstar&quot;" line211="        clear(): void {" line212="            const stride = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line213="            this.buf.fill(0, this.start * stride, this._length * stride);" line214="        }" line215="" line216="        /**" line217="         * Gets the number of pixels declared on the strip" line218="         */" line219="        //% blockId=&quot;hidotstar_length&quot; block=&quot;%strip|length&quot; blockGap=8" line220="        //% strip.defl=strip" line221="        //% weight=60 advanced=true" line222="        length() {" line223="            return this._length;" line224="        }" line225="" line226="        /**" line227="         * Set the brightness of the strip. This flag only applies to future operation." line228="         * @param brightness a measure of LED brightness in 0-255. eg: 255" line229="         */" line230="        //% blockId=&quot;hidotstar_set_brightness&quot; block=&quot;%strip|set brightness %brightness&quot; blockGap=8" line231="        //% strip.defl=strip" line232="        //% weight=59" line233="        //% parts=&quot;hidotstar&quot; advanced=true" line234="        setBrightness(brightness: number): void {" line235="            this.brightness = brightness &amp; 0xff;" line236="        }" line237="" line238="        /**" line239="         * Apply brightness to current colors using a quadratic easing function." line240="         **/" line241="        //% blockId=&quot;hidotstar_each_brightness&quot; block=&quot;%strip|ease brightness&quot; blockGap=8" line242="        //% strip.defl=strip" line243="        //% weight=58" line244="        //% parts=&quot;hidotstar&quot; advanced=true" line245="        easeBrightness(): void {" line246="            const stride2 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line247="            const br = this.brightness;" line248="            const buf = this.buf;" line249="            const end = this.start + this._length;" line250="            const mid = Math.idiv(this._length, 2);" line251="            for (let o = this.start; o &lt; end; ++o) {" line252="                const p = o - this.start;" line253="                const ledoffset = o * stride2;" line254="                const br2 = p &gt; mid" line255="                    ? Math.idiv(255 * (this._length - 1 - p) * (this._length - 1 - p), (mid * mid))" line256="                    : Math.idiv(255 * p * p, (mid * mid));" line257="                const r = (buf[ledoffset + 0] * br2) &gt;&gt; 8; buf[ledoffset + 0] = r;" line258="                const g = (buf[ledoffset + 1] * br2) &gt;&gt; 8; buf[ledoffset + 1] = g;" line259="                const c = (buf[ledoffset + 2] * br2) &gt;&gt; 8; buf[ledoffset + 2] = c;" line260="                if (stride2 == 4) {" line261="                    const w = (buf[ledoffset + 3] * br2) &gt;&gt; 8; buf[ledoffset + 3] = w;" line262="                }" line263="            }" line264="        }" line265="" line266="        /**" line267="         * Create a range of LEDs." line268="         * @param start offset in the LED strip to start the range" line269="         * @param length number of LEDs in the range. eg: 4" line270="         */" line271="        //% weight=89" line272="        //% blockId=&quot;hidotstar_range&quot; block=&quot;%strip|range from %start|with %length|leds&quot;" line273="        //% strip.defl=strip" line274="        //% parts=&quot;hidotstar&quot;" line275="        //% blockSetVariable=range" line276="        range(start: number, length: number): Strip {" line277="            start = start &gt;&gt; 0;" line278="            length = length &gt;&gt; 0;" line279="            let strip = new Strip();" line280="            strip.buf = this.buf;" line281="            strip.brightness = this.brightness;" line282="            strip.start = this.start + Math.clamp(0, this._length - 1, start);" line283="            strip._length = Math.clamp(0, this._length - (strip.start - this.start), length);" line284="            strip._matrixWidth = 0;" line285="            strip._mode = this._mode;" line286="            return strip;" line287="        }" line288="" line289="        /**" line290="         * Shift LEDs forward and clear with zeros." line291="         * You need to call ``show`` to make the changes visible." line292="         * @param offset number of pixels to shift forward, eg: 1" line293="         */" line294="        //% blockId=&quot;hidotstar_shift&quot; block=&quot;%strip|shift pixels by %offset&quot; blockGap=8" line295="        //% strip.defl=strip" line296="        //% weight=40" line297="        //% parts=&quot;hidotstar&quot;" line298="        shift(offset: number = 1): void {" line299="            offset = offset &gt;&gt; 0;" line300="            const stride3 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line301="            this.buf.shift(-offset * stride3, this.start * stride3, this._length * stride3)" line302="        }" line303="" line304="        /**" line305="         * Rotate LEDs forward." line306="         * You need to call ``show`` to make the changes visible." line307="         * @param offset number of pixels to rotate forward, eg: 1" line308="         */" line309="        //% blockId=&quot;hidotstar_rotate&quot; block=&quot;%strip|rotate pixels by %offset&quot; blockGap=8" line310="        //% strip.defl=strip" line311="        //% weight=39" line312="        //% parts=&quot;hidotstar&quot;" line313="        rotate(offset: number = 1): void {" line314="            offset = offset &gt;&gt; 0;" line315="            const stride4 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line316="            this.buf.rotate(-offset * stride4, this.start * stride4, this._length * stride4)" line317="        }" line318="" line319="        /**" line320="         * Estimates the electrical current (mA) consumed by the current light configuration." line321="         */" line322="        //% weight=9 blockId=hidotstar_power block=&quot;%strip|power (mA)&quot;" line323="        //% strip.defl=strip" line324="        //% advanced=true" line325="        power(): number {" line326="            const stride5 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line327="            const end2 = this.start + this._length;" line328="            let q = 0;" line329="            for (let t = this.start; t &lt; end2; ++t) {" line330="                const ledoffset2 = t * stride5;" line331="                for (let u = 0; u &lt; stride5; ++u) {" line332="                    q += this.buf[t + u];" line333="                }" line334="            }" line335="            return Math.idiv(this.length() * 7, 10) /* 0.7mA per hidotstar */" line336="                + Math.idiv(q * 480, 10000); /* rought approximation */" line337="        }" line338="" line339="        private setBufferRGB(offset: number, red: number, green: number, blue: number): void {" line340="            if (this._mode === HiDotStarMode.RGB_RGB) {" line341="                this.buf[offset + 0] = red;" line342="                this.buf[offset + 1] = green;" line343="            } else {" line344="                this.buf[offset + 0] = green;" line345="                this.buf[offset + 1] = red;" line346="            }" line347="            this.buf[offset + 2] = blue;" line348="        }" line349="" line350="        private setAllRGB(rgb: number) {" line351="            let red = unpackR(rgb);" line352="            let green = unpackG(rgb);" line353="            let blue = unpackB(rgb);" line354="" line355="            const br3 = this.brightness;" line356="            if (br3 &lt; 255) {" line357="                red = (red * br3) &gt;&gt; 8;" line358="                green = (green * br3) &gt;&gt; 8;" line359="                blue = (blue * br3) &gt;&gt; 8;" line360="            }" line361="            const end3 = this.start + this._length;" line362="            const stride6 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line363="            for (let a = this.start; a &lt; end3; ++a) {" line364="                this.setBufferRGB(a * stride6, red, green, blue)" line365="            }" line366="        }" line367="        private setPixelRGB(pixeloffset: number, rgb: number): void {" line368="            if (pixeloffset &lt; 0" line369="                || pixeloffset &gt;= this._length)" line370="                return;" line371="" line372="            let stride7 = this._mode === HiDotStarMode.RGBW ? 4 : 3;" line373="            pixeloffset = (pixeloffset + this.start) * stride7;" line374="" line375="            let red2 = unpackR(rgb);" line376="            let green2 = unpackG(rgb);" line377="            let blue2 = unpackB(rgb);" line378="" line379="            let br4 = this.brightness;" line380="            if (br4 &lt; 255) {" line381="                red2 = (red2 * br4) &gt;&gt; 8;" line382="                green2 = (green2 * br4) &gt;&gt; 8;" line383="                blue2 = (blue2 * br4) &gt;&gt; 8;" line384="            }" line385="            this.setBufferRGB(pixeloffset, red2, green2, blue2)" line386="        }" line387="    }" line388="" line389="    /**" line390="     * Create a new HiDotStar driver for `numleds` LEDs." line391="     * @param numleds number of leds in the strip, eg: 24,30,60,64" line392="     */" line393="    //% blockId=&quot;hidotstar_create&quot; block=&quot;HiDotStar with %numleds|leds&quot;" line394="    //% weight=90 blockGap=8" line395="    //% parts=&quot;hidotstar&quot;" line396="    //% blockSetVariable=strip" line397="    export function create(numleds: number): Strip {" line398="        let strip2 = new Strip();" line399="        let stride8 = 3;" line400="        strip2.buf = pins.createBuffer(numleds * stride8);" line401="        strip2.start = 0;" line402="        strip2._length = numleds;" line403="        strip2._mode = HiDotStarMode.RGB_RGB;" line404="        strip2._matrixWidth = 0;" line405="        strip2.setBrightness(128);" line406="        return strip2;" line407="    }" line408="" line409="    /**" line410="     * Converts red, green, blue channels into a RGB color" line411="     * @param red value of the red channel between 0 and 255. eg: 255" line412="     * @param green value of the green channel between 0 and 255. eg: 255" line413="     * @param blue value of the blue channel between 0 and 255. eg: 255" line414="     */" line415="    //% weight=1" line416="    //% blockId=&quot;hidotstar_rgb&quot; block=&quot;red %red|green %green|blue %blue&quot;" line417="    //% advanced=true" line418="    export function rgb(red: number, green: number, blue: number): number {" line419="        return packRGB(red, green, blue);" line420="    }" line421="" line422="    /**" line423="     * Gets the RGB value of a known color" line424="    */" line425="    //% weight=2 blockGap=8" line426="    //% blockId=&quot;hidotstar_colors&quot; block=&quot;%color&quot;" line427="    //% advanced=true" line428="    export function colors(color: HiDotStarColors): number {" line429="        return color;" line430="    }" line431="" line432="    function packRGB(a: number, b: number, c: number): number {" line433="        return ((a &amp; 0xFF) &lt;&lt; 16) | ((b &amp; 0xFF) &lt;&lt; 8) | (c &amp; 0xFF);" line434="    }" line435="    function unpackR(rgb: number): number {" line436="        let d = (rgb &gt;&gt; 16) &amp; 0xFF;" line437="        return d;" line438="    }" line439="    function unpackG(rgb: number): number {" line440="        let e = (rgb &gt;&gt; 8) &amp; 0xFF;" line441="        return e;" line442="    }" line443="    function unpackB(rgb: number): number {" line444="        let f = (rgb) &amp; 0xFF;" line445="        return f;" line446="    }" line447="" line448="    /**" line449="     * Converts a hue saturation luminosity value into a RGB color" line450="     * @param h hue from 0 to 360" line451="     * @param s saturation from 0 to 99" line452="     * @param l luminosity from 0 to 99" line453="     */" line454="    //% blockId=hidotstarHSL block=&quot;hue %h|saturation %s|luminosity %l&quot;" line455="    export function hsl(h: number, s: number, l: number): number {" line456="        h = Math.round(h);" line457="        s = Math.round(s);" line458="        l = Math.round(l);" line459="" line460="        h = h % 360;" line461="        s = Math.clamp(0, 99, s);" line462="        l = Math.clamp(0, 99, l);" line463="        let c2 = Math.idiv((((100 - Math.abs(2 * l - 100)) * s) &lt;&lt; 8), 10000); //chroma, [0,255]" line464="        let h12 = Math.idiv(h, 60);//[0,6]" line465="        let h22 = Math.idiv((h - h12 * 60) * 256, 60);//[0,255]" line466="        let temp = Math.abs((((h12 % 2) &lt;&lt; 8) + h22) - 256);" line467="        let x = (c2 * (256 - (temp))) &gt;&gt; 8;//[0,255], second largest component of this color" line468="        let r$: number;" line469="        let g$: number;" line470="        let b$: number;" line471="        if (h12 == 0) {" line472="            r$ = c2; g$ = x; b$ = 0;" line473="        } else if (h12 == 1) {" line474="            r$ = x; g$ = c2; b$ = 0;" line475="        } else if (h12 == 2) {" line476="            r$ = 0; g$ = c2; b$ = x;" line477="        } else if (h12 == 3) {" line478="            r$ = 0; g$ = x; b$ = c2;" line479="        } else if (h12 == 4) {" line480="            r$ = x; g$ = 0; b$ = c2;" line481="        } else if (h12 == 5) {" line482="            r$ = c2; g$ = 0; b$ = x;" line483="        }" line484="        let m2 = Math.idiv((Math.idiv((l * 2 &lt;&lt; 8), 100) - c2), 2);" line485="        let r2 = r$ + m2;" line486="        let g2 = g$ + m2;" line487="        let b2 = b$ + m2;" line488="        return packRGB(r2, g2, b2);" line489="    }" line490="" line491="    export enum HueInterpolationDirection {" line492="        Clockwise," line493="        CounterClockwise," line494="        Shortest" line495="    }" line496="}" numlines="497"></mutation></block></next></block></next></block></statement></block></xml>